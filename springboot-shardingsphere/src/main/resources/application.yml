#数据分片+读写分离配置

spring: 
  main: 
    # 允许重新定义bean
    allow-bean-definition-overriding: true
  shardingsphere:
    props: 
      #sql显示
      sql.show: true
      #是否在启动时检查分表元数据一致性
      check.table.metadata.enabled: true
    # 数据源
    datasource: 
      names: shardings01,shardings02,shardings01s1,shardings01s2,shardings02s1,shardings02s2
      shardings01: 
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/shardings01
        username: root
        password: root
      shardings02: 
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/shardings02
        username: root
        password: root
      shardings01s1: 
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/shardings01_s1
        username: root
        password: root
      shardings01s2: 
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/shardings01_s2
        username: root
        password: root
      shardings02s1: 
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/shardings02_s1
        username: root
        password: root
      shardings02s2: 
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/shardings01_s2
        username: root
        password: root
    sharding: 
      # 设置分库策略
      default-database-strategy:
        # 行表达式分库策略 
        inline:
          # 分片列名称
          sharding-column: status
          # 分片算法行表达式
          algorithm-expression: shardings0$->{(status % 2)+1}
      binding-tables: t_goods
      tables: 
        t_goods: 
          actual-data-nodes: shardings0$->{1..2}.t_goods$->{0..1}
          table-strategy:
            #复合分片策略
            complex:
              sharding-columns: goods_id
              algorithm-class-name: com.shardingsphere.config.ComplexKeyShardingImpl
            # 行表达式分片策略 
#            inline:
#              # 分片列名称
#              sharding-column: goods_id
#              # 分片算法行表达式
#              algorithm-expression: t_goods$->{goods_id % 2}
          key-generator:
            # 自增列名称 
            column: goods_id
            type: SNOWFLAKE
            props:
              worker.id: 5
              max.tolerate.time.difference.milliseconds: 1000
      # 读写分离规则
      master-slave-rules: 
        #数据源名称
        shardings01: 
          #主库数据源名称
          master-data-source-name: shardings01
          #从库负载均衡算法类型
          load-balance-algorithm-type: ROUND_ROBIN
          #从库数据源名称列表
          slave-data-source-names: shardings01s1,shardings01s2
        shardings02: 
          master-data-source-name: shardings02
          load-balance-algorithm-type: ROUND_ROBIN
          slave-data-source-names: shardings02s1,shardings02s2
#      #数据脱敏
#      encrypt-rule: 
#        encryptors:
#          tables.t_goods.columns.goods_name: 
##          props:
##            aes.key.value: 
#            #加解密器类型
#            type: MD5
#            #辅助查询字段
#            #assisted-query-columns: 
#            #存储密文的字段
#            qualified-columns: goods_qualified
